{"version":3,"sources":["ui-primeng/src/dynamic-primeng-form-control.component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-primeng-form-control.component.spec.js","sourcesContent":["import { DebugElement, SimpleChange } from \"@angular/core\";\nimport { TestBed, async, inject, ComponentFixture } from \"@angular/core/testing\";\nimport { ReactiveFormsModule, FormGroup, FormControl } from \"@angular/forms\";\nimport { By } from \"@angular/platform-browser\";\nimport { NoopAnimationsModule } from \"@angular/platform-browser/animations\";\nimport {\n    AutoCompleteModule,\n    CalendarModule,\n    CheckboxModule,\n    ChipsModule,\n    DropdownModule,\n    EditorModule,\n    InputMaskModule,\n    InputSwitchModule,\n    InputTextModule,\n    InputTextareaModule,\n    MultiSelectModule,\n    RadioButtonModule,\n    RatingModule,\n    SliderModule,\n    SpinnerModule\n} from \"primeng/primeng\";\nimport {\n    DynamicFormsCoreModule,\n    DynamicFormService,\n    DynamicCheckboxModel,\n    DynamicCheckboxGroupModel,\n    DynamicDatePickerModel,\n    DynamicEditorModel,\n    DynamicFileUploadModel,\n    DynamicFormArrayModel,\n    DynamicFormControlModel,\n    DynamicFormGroupModel,\n    DynamicInputModel,\n    DynamicRadioGroupModel,\n    DynamicRatingModel,\n    DynamicSelectModel,\n    DynamicSliderModel,\n    DynamicSwitchModel,\n    DynamicTextAreaModel,\n    DynamicTimePickerModel\n} from \"@ng2-dynamic-forms/core\";\nimport { DynamicPrimeNGFormControlComponent } from \"./dynamic-primeng-form-control.component\";\nimport {\n    PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES,\n    PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES,\n    PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES,\n    PrimeNGFormControlType\n} from \"./dynamic-primeng-form.const\";\n\ndescribe(\"DynamicFormPrimeNGComponent test suite\", () => {\n\n    let formModel = [\n            new DynamicCheckboxModel({id: \"checkbox\"}),\n            new DynamicCheckboxGroupModel({id: \"checkboxGroup\", group: []}),\n            new DynamicDatePickerModel({id: \"datepicker\"}),\n            new DynamicEditorModel({id: \"editor\"}),\n            new DynamicFileUploadModel({id: \"upload\", url: \"\"}),\n            new DynamicFormArrayModel({id: \"formArray\", groupFactory: () => []}),\n            new DynamicFormGroupModel({id: \"formGroup\", group: []}),\n            new DynamicInputModel({id: \"input\", maxLength: 51}),\n            new DynamicRadioGroupModel({id: \"radioGroup\"}),\n            new DynamicRatingModel({id: \"rating\"}),\n            new DynamicSelectModel({id: \"select\", options: [{value: \"One\"}, {value: \"Two\"}], value: \"One\"}),\n            new DynamicSliderModel({id: \"slider\"}),\n            new DynamicSwitchModel({id: \"switch\"}),\n            new DynamicTextAreaModel({id: \"textarea\"}),\n            new DynamicTimePickerModel({id: \"timepicker\"})\n        ],\n        testModel = formModel[7] as DynamicInputModel,\n        formGroup: FormGroup,\n        fixture: ComponentFixture<DynamicPrimeNGFormControlComponent>,\n        component: DynamicPrimeNGFormControlComponent,\n        debugElement: DebugElement,\n        testElement: DebugElement;\n\n    beforeEach(async(() => {\n\n        TestBed.configureTestingModule({\n\n            imports: [\n                ReactiveFormsModule,\n                NoopAnimationsModule,\n                DynamicFormsCoreModule.forRoot(),\n                AutoCompleteModule,\n                CalendarModule,\n                CheckboxModule,\n                ChipsModule,\n                DropdownModule,\n                EditorModule,\n                InputMaskModule,\n                InputSwitchModule,\n                InputTextModule,\n                InputTextareaModule,\n                MultiSelectModule,\n                RadioButtonModule,\n                RatingModule,\n                SliderModule,\n                SpinnerModule\n            ],\n            declarations: [DynamicPrimeNGFormControlComponent]\n\n        }).compileComponents().then(() => {\n\n            fixture = TestBed.createComponent(DynamicPrimeNGFormControlComponent);\n\n            component = fixture.componentInstance;\n            debugElement = fixture.debugElement;\n        });\n    }));\n\n    beforeEach(inject([DynamicFormService], (service: DynamicFormService) => {\n\n        formGroup = service.createFormGroup(formModel);\n\n        component.group = formGroup;\n        component.model = testModel;\n\n        component.ngOnChanges({\n\n            group: new SimpleChange(null, component.group, true),\n            model: new SimpleChange(null, component.model, true)\n        });\n\n        fixture.detectChanges();\n\n        testElement = debugElement.query(By.css(`input[id='${testModel.id}']`));\n    }));\n\n    it(\"should initialize correctly\", () => {\n\n        expect(component.context).toBeNull();\n        expect(component.control instanceof FormControl).toBe(true);\n        expect(component.group instanceof FormGroup).toBe(true);\n        expect(component.model instanceof DynamicFormControlModel).toBe(true);\n        expect(component.hasErrorMessaging).toBe(false);\n\n        expect(component.onControlValueChanges).toBeDefined();\n        expect(component.onModelDisabledUpdates).toBeDefined();\n        expect(component.onModelValueUpdates).toBeDefined();\n\n        expect(component.blur).toBeDefined();\n        expect(component.change).toBeDefined();\n        expect(component.focus).toBeDefined();\n\n        expect(component.onValueChange).toBeDefined();\n        expect(component.onFocusChange).toBeDefined();\n\n        expect(component.isValid).toBe(true);\n        expect(component.isInvalid).toBe(false);\n\n        expect(component.type).toEqual(PrimeNGFormControlType.Input);\n    });\n\n    it(\"should have an input element\", () => {\n\n        expect(testElement instanceof DebugElement).toBe(true);\n    });\n\n    it(\"should listen to native focus and blur events\", () => {\n\n        spyOn(component, \"onFocusChange\");\n\n        testElement.triggerEventHandler(\"focus\", null);\n        testElement.triggerEventHandler(\"blur\", null);\n\n        expect(component.onFocusChange).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"should listen to native change event\", () => {\n\n        spyOn(component, \"onValueChange\");\n\n        testElement.triggerEventHandler(\"change\", null);\n\n        expect(component.onValueChange).toHaveBeenCalled();\n    });\n\n    it(\"should update model value when control value changes\", () => {\n\n        spyOn(component, \"onControlValueChanges\");\n\n        component.control.setValue(\"test\");\n\n        expect(component.onControlValueChanges).toHaveBeenCalled();\n    });\n\n    it(\"should update control value when model value changes\", () => {\n\n        spyOn(component, \"onModelValueUpdates\");\n\n        testModel.valueUpdates.next(\"test\");\n\n        expect(component.onModelValueUpdates).toHaveBeenCalled();\n    });\n\n    it(\"should update control activation when model disabled property changes\", () => {\n\n        spyOn(component, \"onModelDisabledUpdates\");\n\n        testModel.disabledUpdates.next(true);\n\n        expect(component.onModelDisabledUpdates).toHaveBeenCalled();\n    });\n\n    it(\"should determine correct form control type\", () => {\n\n        let testFn = DynamicPrimeNGFormControlComponent.getFormControlType;\n\n        expect(testFn(formModel[0])).toEqual(PrimeNGFormControlType.Checkbox);\n\n        expect(testFn(formModel[1])).toEqual(PrimeNGFormControlType.Group);\n\n        expect(testFn(formModel[2])).toEqual(PrimeNGFormControlType.Calendar);\n\n        expect(testFn(formModel[3])).toEqual(PrimeNGFormControlType.Editor);\n\n        expect(testFn(formModel[4])).toBeNull();\n\n        expect(testFn(formModel[5])).toEqual(PrimeNGFormControlType.Array);\n\n        expect(testFn(formModel[6])).toEqual(PrimeNGFormControlType.Group);\n\n        expect(testFn(formModel[7])).toEqual(PrimeNGFormControlType.Input);\n\n        (formModel[7] as DynamicInputModel).multiple = true;\n        expect(testFn(formModel[7])).toEqual(PrimeNGFormControlType.Chips);\n\n        (formModel[7] as DynamicInputModel).list = [\"test1\", \"test2\", \"test3\"];\n        expect(testFn(formModel[7])).toEqual(PrimeNGFormControlType.AutoComplete);\n\n        (formModel[7] as DynamicInputModel).mask = \"+(99) 999-9999\";\n        expect(testFn(formModel[7])).toEqual(PrimeNGFormControlType.InputMask);\n\n        (formModel[7] as DynamicInputModel).inputType = \"number\";\n        expect(testFn(formModel[7])).toEqual(PrimeNGFormControlType.Spinner);\n\n        expect(testFn(formModel[8])).toEqual(PrimeNGFormControlType.RadioGroup);\n\n        expect(testFn(formModel[9])).toEqual(PrimeNGFormControlType.Rating);\n\n        expect(testFn(formModel[10])).toEqual(PrimeNGFormControlType.Dropdown);\n\n        (formModel[10] as DynamicSelectModel<string>).multiple = true;\n        expect(testFn(formModel[10])).toEqual(PrimeNGFormControlType.MultiSelect);\n\n        expect(testFn(formModel[11])).toEqual(PrimeNGFormControlType.Slider);\n\n        expect(testFn(formModel[12])).toEqual(PrimeNGFormControlType.InputSwitch);\n\n        expect(testFn(formModel[13])).toEqual(PrimeNGFormControlType.TextArea);\n\n        expect(testFn(formModel[14])).toEqual(PrimeNGFormControlType.Calendar);\n    });\n\n    xit(\"should determine correct template directives\", async(() => {\n\n        let testFn = DynamicPrimeNGFormControlComponent.getTemplateDirectives;\n\n        let fixture1: ComponentFixture<DynamicPrimeNGFormControlComponent> = TestBed.createComponent(DynamicPrimeNGFormControlComponent),\n            component1: DynamicPrimeNGFormControlComponent = fixture1.componentInstance;\n\n        (formModel[7] as DynamicInputModel).list = [\"test1\", \"test2\", \"test3\"];\n\n        component1.group = formGroup;\n        component1.model = formModel[7];\n\n        fixture1.detectChanges();\n\n        //expect(testFn(component1.pViewChild)).toEqual(PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES);\n    }));\n});"]}